using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.Components;
using Content.Shared.TapeRecorder.Components;
using Content.Shared.TapeRecorder.Events;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.TapeRecorder.Ui;

[GenerateTypedNameReferences]
public sealed partial class TapeRecorderMenu : FancyWindow
{ 
    private readonly ButtonGroup _controlButtons = new();
    private readonly ButtonGroup _modeButtons = new();
    private readonly TapeRecorderBoundUserInterface _owner;

    private TapeRecorderMode _mode = TapeRecorderMode.Empty;
    private bool _active = false;
    private float _rewindSpeed = 3f;
    private bool _onCooldown = false;

    public TapeRecorderMenu(TapeRecorderBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _owner = owner;

        PlayButton.Group = _controlButtons;
        StopButton.Group = _controlButtons;

        PlayButton.OnPressed += _ => _owner.ToggleSwitch();
        StopButton.OnPressed += _ => _owner.ToggleSwitch();

        RewindButton.Group = _modeButtons;
        RecordButton.Group = _modeButtons;
        PlaybackButton.Group = _modeButtons;

        RewindButton.OnPressed += _ => _owner.ChangeMode(TapeRecorderMode.Rewinding);
        RecordButton.OnPressed += _ => _owner.ChangeMode(TapeRecorderMode.Recording);
        PlaybackButton.OnPressed += _ => _owner.ChangeMode(TapeRecorderMode.Playing);

        PrintButton.OnPressed += _ => _owner.PrintTranscript();
    }

    private void SetSlider(float maxTime, float currentTime)
    {
        PlaybackSlider.Disabled = true;
        PlaybackSlider.MaxValue = maxTime;
        PlaybackSlider.Value = currentTime;
    }

    public void UpdatePrint(bool disabled)
    {
        if (disabled)
        {
            PrintButton.Disabled = true;
            _onCooldown = true;
        }
        else
        {
            PrintButton.Disabled = false;
            _onCooldown = false;
        }
    }

    public void UpdateState(TapeRecorderState state)
    {
        _rewindSpeed = state.RewindSpeed;
        _active = state.Active;
        _mode = state.Mode;

        CassetteLabel.Text = (state.HasCasette)
            ? Loc.GetString("tape-recorder-menu-cassette-label", ("cassetteName", state.CassetteName))
            : Loc.GetString("tape-recorder-menu-no-cassette-label");

        // Checking mode and enabling button to make it glow
        switch (state.Mode)
        {
            case TapeRecorderMode.Recording:
                RecordButton.Pressed = true;
                break;
            case TapeRecorderMode.Rewinding:
                RewindButton.Pressed = true;
                break;
            case TapeRecorderMode.Playing:
                PlaybackButton.Pressed = true;
                break;
            default:
                break;
        }

        // Checking all buttons to now overdisable them in future
        PlaybackButton.Disabled = (!state.HasCasette || state.Active || state.CurrentTime >= state.MaxTime) && state.Mode != TapeRecorderMode.Playing;
        RewindButton.Disabled = (!state.HasCasette || state.Active || state.CurrentTime <= float.Epsilon) && state.Mode != TapeRecorderMode.Rewinding;
        RecordButton.Disabled = (!state.HasCasette || state.Active || state.CurrentTime >= state.MaxTime) && state.Mode != TapeRecorderMode.Recording;
        PrintButton.Disabled = !state.HasCasette || state.Active || !state.HasData || _onCooldown;

        PlayButton.Disabled = !state.HasCasette;
        StopButton.Disabled = !state.HasCasette;

        if (state.Active)
            PlayButton.Pressed = true;
        else
            StopButton.Pressed = true;

        if (state.HasCasette)
            SetSlider(state.MaxTime, state.CurrentTime);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (!_active)
            return;

        if (_mode == TapeRecorderMode.Rewinding)
            PlaybackSlider.Value -= args.DeltaSeconds * _rewindSpeed;

        if (_mode == TapeRecorderMode.Playing || _mode == TapeRecorderMode.Recording)
            PlaybackSlider.Value += args.DeltaSeconds;
    }
}
